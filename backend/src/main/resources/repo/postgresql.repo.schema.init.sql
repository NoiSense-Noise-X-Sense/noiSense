CREATE TABLE comment (
                       comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                       user_id BIGINT NOT NULL,
                       board_id BIGINT NOT NULL,
                       nickname VARCHAR(100),
                       content VARCHAR(100),
                       created_date TIMESTAMP,
                       modified_date TIMESTAMP
);

CREATE TABLE autonomous_district (
                                   code VARCHAR(50) NOT NULL,
                                   name_ko VARCHAR(50) NOT NULL,
                                   name_en VARCHAR(50) NOT NULL
);

CREATE TABLE auth (
                    auth_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                    user_id BIGINT NOT NULL,
                    token_type VARCHAR(255),
                    access_token VARCHAR(255),
                    refresh_token VARCHAR(255),
                    created_date TIMESTAMP,
                    modified_date TIMESTAMP
);

CREATE TABLE users (
                     user_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                     user_nm VARCHAR(100),
                     nickname VARCHAR(100),
                     email VARCHAR(100),
                     role VARCHAR(10),
                     autonomous_district VARCHAR(50),
                     administrative_district VARCHAR(50),
                     created_date TIMESTAMP,
                     modified_date TIMESTAMP
);

CREATE TABLE administrative_district (
                                       code VARCHAR(50) NOT NULL,
                                       name_ko VARCHAR(50) NOT NULL,
                                       name_en VARCHAR(50) NOT NULL,
                                       autonomous_district VARCHAR(50) NOT NULL
);

CREATE TABLE board (
                     board_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                     user_id BIGINT NOT NULL,
                     nickname VARCHAR(100),
                     title VARCHAR(100),
                     content VARCHAR(255),
                     emotional_score NUMERIC(20),
                     empathy_count NUMERIC(20),
                     view_count NUMERIC(20),
                     autonomous_district VARCHAR(50),
                     administrative_district VARCHAR(50),
                     created_date TIMESTAMP,
                     modified_date TIMESTAMP
);

CREATE TABLE noise_complaints (
                                noise_complaints_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                autonomous_district VARCHAR(100),
                                year INTEGER,
                                count INTEGER
);

CREATE TYPE boundary_polygon_type AS ENUM ('ÌñâÏ†ïÍµ¨Ïó≠', 'ÌñâÏ†ïÎèô');
CREATE TYPE geometry_format_type AS ENUM ('GeoJSON', 'WKT');

CREATE TABLE boundary_polygon (
                                boundary_polygon_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                autonomous_district VARCHAR(10),
                                administrative_district VARCHAR(10),
                                type boundary_polygon_type NOT NULL,
                                geometry_format geometry_format_type DEFAULT 'GeoJSON' NOT NULL,
                                geometry TEXT NOT NULL,
                                created_date TIMESTAMP
);

CREATE TABLE sensor_data (
                           sensor_data_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                           sensing_time TIMESTAMP,
                           region VARCHAR(100),
                           autonomous_district VARCHAR(100),
                           administrative_district VARCHAR(100),
                           max_noise NUMERIC(5, 2),
                           avg_noise NUMERIC(5, 2),
                           min_noise NUMERIC(5, 2),
                           max_temp NUMERIC(5, 2),
                           avg_temp NUMERIC(5, 2),
                           min_temp NUMERIC(5, 2),
                           max_humi NUMERIC(5, 2),
                           avg_humi NUMERIC(5, 2),
                           min_humi NUMERIC(5, 2),
                           batch_time TIMESTAMP
);

CREATE TABLE board_empathy (
                             board_empathy_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                             board_id BIGINT NOT NULL,
                             user_id BIGINT NOT NULL,
                             created_date TIMESTAMP,
                             UNIQUE (board_id, user_id)
);

--- Spring Batch Start
-- üéØ 1. Job Ïù∏Ïä§ÌÑ¥Ïä§ (Job Ï†ïÏùò Îã®ÏúÑ)
CREATE TABLE BATCH_JOB_INSTANCE  (
                                   JOB_INSTANCE_ID BIGINT PRIMARY KEY,
                                   VERSION BIGINT,
                                   JOB_NAME VARCHAR(100) NOT NULL,
                                   JOB_KEY VARCHAR(32) NOT NULL,
                                   CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

-- üéØ 2. Job Ïã§Ìñâ Ïù¥Î†•
CREATE TABLE BATCH_JOB_EXECUTION  (
                                    JOB_EXECUTION_ID BIGINT PRIMARY KEY,
                                    VERSION BIGINT,
                                    JOB_INSTANCE_ID BIGINT NOT NULL,
                                    CREATE_TIME TIMESTAMP NOT NULL,
                                    START_TIME TIMESTAMP,
                                    END_TIME TIMESTAMP,
                                    STATUS VARCHAR(10),
                                    EXIT_CODE VARCHAR(2500),
                                    EXIT_MESSAGE VARCHAR(2500),
                                    LAST_UPDATED TIMESTAMP,
                                    JOB_CONFIGURATION_LOCATION VARCHAR(2500),
                                    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
                                      REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

-- üéØ 3. Job Ïã§Ìñâ Ïãú Ï†ÑÎã¨Îêú ÌååÎùºÎØ∏ÌÑ∞ (Spring Batch 5.x Í∏∞Ï§Ä Ïª¨ÎüºÎ™Ö)
CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
                                           JOB_EXECUTION_ID BIGINT NOT NULL,
                                           PARAMETER_NAME VARCHAR(100) NOT NULL,
                                           PARAMETER_TYPE VARCHAR(50) NOT NULL,
                                           PARAMETER_VALUE VARCHAR(250),
                                           IDENTIFYING CHAR(1) NOT NULL,
                                           CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
                                             REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- üéØ 4. Step Ïã§Ìñâ Ïù¥Î†•
CREATE TABLE BATCH_STEP_EXECUTION  (
                                     STEP_EXECUTION_ID BIGINT PRIMARY KEY,
                                     VERSION BIGINT NOT NULL,
                                     STEP_NAME VARCHAR(100) NOT NULL,
                                     JOB_EXECUTION_ID BIGINT NOT NULL,
                                     CREATE_TIME TIMESTAMP NOT NULL,
                                     START_TIME TIMESTAMP,
                                     END_TIME TIMESTAMP,
                                     STATUS VARCHAR(10),
                                     COMMIT_COUNT BIGINT,
                                     READ_COUNT BIGINT,
                                     FILTER_COUNT BIGINT,
                                     WRITE_COUNT BIGINT,
                                     READ_SKIP_COUNT BIGINT,
                                     WRITE_SKIP_COUNT BIGINT,
                                     PROCESS_SKIP_COUNT BIGINT,
                                     ROLLBACK_COUNT BIGINT,
                                     EXIT_CODE VARCHAR(2500),
                                     EXIT_MESSAGE VARCHAR(2500),
                                     LAST_UPDATED TIMESTAMP,
                                     CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
                                       REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- üéØ 5. Step Ïã§Ìñâ Ïª®ÌÖçÏä§Ìä∏ (JSON Îì± ÏßÅÎ†¨Ìôî Ï†ÄÏû•)
CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
                                             STEP_EXECUTION_ID BIGINT PRIMARY KEY,
                                             SHORT_CONTEXT VARCHAR(2500) NOT NULL,
                                             SERIALIZED_CONTEXT TEXT,
                                             CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
                                               REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

-- üéØ 6. Job Ïã§Ìñâ Ïª®ÌÖçÏä§Ìä∏
CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
                                            JOB_EXECUTION_ID BIGINT PRIMARY KEY,
                                            SHORT_CONTEXT VARCHAR(2500) NOT NULL,
                                            SERIALIZED_CONTEXT TEXT,
                                            CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
                                              REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- üéØ 7. Ïã§ÌñâÍ≤∞Í≥º
CREATE TABLE batch_result_log (
                                batch_result_log_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                job_name VARCHAR(100) NOT NULL,
                                message TEXT,
                                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- üéØ 8. ÏãúÌÄÄÏä§
CREATE SEQUENCE BATCH_JOB_SEQ START 1;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ START 1;
CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ START 1;

--- Spring Batch End



COMMENT ON COLUMN sensor_data.region IS 'ÏûÖÎ†•ÎêòÎäî Îç∞Ïù¥ÌÑ∞Í∞íÎì§
residential_area
roads_and_parks
industrial_area
traditional_markets
main_street
commercial_area
public_facilities
parks';

COMMENT ON COLUMN sensor_data.max_noise IS 'ÏÜåÏùå ÏµúÎåÄ(dB)';
COMMENT ON COLUMN sensor_data.avg_noise IS 'ÏÜåÏùå ÌèâÍ∑†(dB)';
COMMENT ON COLUMN sensor_data.min_noise IS 'ÏÜåÏùå ÏµúÏÜå(dB)';

ALTER TABLE comment ADD CONSTRAINT pk_comment PRIMARY KEY (comment_id);

ALTER TABLE autonomous_district ADD CONSTRAINT pk_autonomous_district PRIMARY KEY (code);

ALTER TABLE auth ADD CONSTRAINT pk_auth PRIMARY KEY (auth_id, user_id);

ALTER TABLE users ADD CONSTRAINT pk_users PRIMARY KEY (user_id);

ALTER TABLE administrative_district ADD CONSTRAINT pk_administrative_district PRIMARY KEY (code);

ALTER TABLE board ADD CONSTRAINT pk_board PRIMARY KEY (board_id);

ALTER TABLE noise_complaints ADD CONSTRAINT pk_noise_complaints PRIMARY KEY (noise_complaints_id);

ALTER TABLE boundary_polygon ADD CONSTRAINT pk_boundary_polygon PRIMARY KEY (boundary_polygon_id);

ALTER TABLE sensor_data ADD CONSTRAINT pk_sensor_data PRIMARY KEY (sensor_data_id);

ALTER TABLE auth ADD CONSTRAINT fk_users_to_auth_1 FOREIGN KEY (user_id)
  REFERENCES users (user_id);

ALTER TABLE "sensor_data" ALTER COLUMN "sensing_time" TYPE TIMESTAMP(0);

ALTER TABLE "sensor_data" ALTER COLUMN "batch_time" TYPE TIMESTAMP(0);

ALTER TABLE board_empathy ADD CONSTRAINT fk_board_to_board_empathy_1
  FOREIGN KEY (board_id)
    REFERENCES board (board_id)
    ON DELETE CASCADE;

ALTER TABLE board_empathy ADD CONSTRAINT fk_users_to_board_empathy_1
  FOREIGN KEY (user_id)
    REFERENCES users (user_id)
    ON DELETE CASCADE;

