name: Deploy to EC2

on:
  push:
    branches: [ feature/awscicd ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      JWT_EXPIRATION_MS: ${{ secrets.JWT_EXPIRATION_MS }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      SPRING_DATASOURCE_PORT: ${{ secrets.SPRING_DATASOURCE_PORT }}
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}

    steps:
      - name: Checkout 코드
        uses: actions/checkout@v3

      - name: Node.js 설치
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Frontend Build
        run: |
          cd frontend
          npm ci
          npm run build
          cp -r dist/* ../backend/src/main/resources/static/

      - name: Backend Build
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build --no-daemon -x test

      - name: EC2에 JAR 파일 복사
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend/build/libs/*.jar"
          target: "/home/ec2-user/app/"

      - name: EC2에서 JAR 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app/backend/build/libs

            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_PORT=${{ secrets.SPRING_DATASOURCE_PORT }}" >> .env
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env

            echo "======== .env 내용 확인 ========="
            cat .env

            echo "======== 환경변수 적용 ========"
            # 환경변수 적용
            if [ -f .env ]; then
              echo ".env 파일이 존재합니다. 환경변수를 적용합니다."
              set -a
              source .env
              set +a
            else
              echo ".env 파일이 존재하지 않습니다. 배포를 중단합니다."
              exit 1
            fi

            echo "URL   = [$SPRING_DATASOURCE_URL]"


            echo "======== JAR 파일 확인 ========"
            ls -al backend-0.0.1-SNAPSHOT.jar || echo "=== JAR 파일이 존재하지 않습니다"

            echo "======== 자바 실행 ========="
            nohup java -jar backend-0.0.1-SNAPSHOT.jar > app.log 2>&1 & disown
            sleep 5

            echo "======== 실행된 자바 프로세스 확인 ========"
            pgrep -af java || echo "실행 중인 자바 없음"

            echo "========= 자바 로그 출력 ========"
            tail -n 50 app.log
